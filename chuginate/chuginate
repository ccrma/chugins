#!/usr/bin/env python3
"""
Generate a skeleton for a new ChuGin.
"""

import sys, re, os, io, tarfile, base64

if len(sys.argv) != 2 and len(sys.argv) != 3:
    print("usage: chuginate chugin_name [destination_directory]")
    sys.exit(-1)

chugin_name = sys.argv[1]
if len(sys.argv) >= 3:
    dest_dir = sys.argv[2]
else:
    dest_dir = sys.argv[1]
    os.mkdir(dest_dir)

chugin_lcname = chugin_name.lower()
chugin_ucname = chugin_name.upper()
chugin_initials = re.sub('[a-z]', '', chugin_name).lower()
if len(chugin_initials) == 0: chugin_initials = chugin_name[0]
chugin_header_path = 'chuck/include'

USE_EXISTING_CHUCK_HEADERS = False
# if the chuck headers already exist
if os.path.isdir("%s/../chuck/include" % (dest_dir)):
    chugin_header_path = "../chuck/include/"
    USE_EXISTING_CHUCK_HEADERS = True

def substitute(text):
    global chugin_name, chugin_lcname, chugin_ucname, chugin_initials, chugin_header_path
    text = re.sub('\%\(CHUGIN_NAME\)\%', chugin_name, text)
    text = re.sub('\%\(CHUGIN_LCNAME\)\%', chugin_lcname, text)
    text = re.sub('\%\(CHUGIN_UCNAME\)\%', chugin_ucname, text)
    text = re.sub('\%\(CHUGIN_INITIALS\)\%', chugin_initials, text)
    text = re.sub('\%\(CHUGIN_HEADER_PATH\)\%', chugin_header_path, text)
    return text

# print "name: %s lc: %s initials: %s" % (chugin_name, chugin_lcname, chugin_initials)

code = dict()
tgz = dict()
filepath = dict()
newlines = dict()

code['cpp'] = u'''//-----------------------------------------------------------------------------
// Entaro ChucK Developer!
// This is a chugin boilerplate, generated by chuginate!
//-----------------------------------------------------------------------------
// NOTE by default, chuginate generates a new UGen subclass in this file
//      but it is possible, of course, to create non-UGen classes in a chugin!
// To modify this generated file for a non-UGen class...
//      1. in QUERY->begin_class(), change "UGen" to a different ChucK class
//         (e.g., `QUERY->begin_class(QUERY, "%(CHUGIN_NAME)%", "Object");`)
//      2. remove or commment out the line containing QUERY->add_ugen_func()
//      3. that's it; the rest is no different for UGens/non-UGens
//-----------------------------------------------------------------------------
// NOTE once you have built this into a chugin (%(CHUGIN_NAME)%.chug), here are a few
//      helpful tools for testing / probing / verifying your new chugin!
//
// chuginate also generated a %(CHUGIN_NAME)%-test.ck boilerplate ChucK program
//      to help test your chugin (see %(CHUGIN_NAME)%-test.ck for more instructions)
//
// run `chuck --chugin-probe` to probe what chugins would be loaded, and
//      from where in the chugin search paths
//
// run `chuck -v3 --loop` to see what chugins are actually loaded at runtime,
//      with more info and error reporting than with --chugin-probe
//
// other helpful chugin-related flags include:
//      --chugin:<filename>
//      --chugin-path:(path) / -G(path)
//      --chugin-load:{on/off}
//
// for more information on command-line options:
//      https://chuck.stanford.edu/doc/program/options.html
// for more information on chugins:
//      https://chuck.stanford.edu/extend/
//-----------------------------------------------------------------------------
// happy chucking & chugging!
//-----------------------------------------------------------------------------

// include chugin header
#include "chugin.h"

// general includes
#include <iostream>


// declaration of chugin constructor
CK_DLL_CTOR( %(CHUGIN_LCNAME)%_ctor );
// declaration of chugin desctructor
CK_DLL_DTOR( %(CHUGIN_LCNAME)%_dtor );

// example of getter/setter
CK_DLL_MFUN( %(CHUGIN_LCNAME)%_setParam );
CK_DLL_MFUN( %(CHUGIN_LCNAME)%_getParam );

// for chugins extending UGen, this is mono synthesis function for 1 sample
CK_DLL_TICK( %(CHUGIN_LCNAME)%_tick );

// this is a special offset reserved for chugin internal data
t_CKINT %(CHUGIN_LCNAME)%_data_offset = 0;


//-----------------------------------------------------------------------------
// class definition for internal chugin data
// (NOTE this isn't strictly necessary, but is one example of a recommended approach)
//-----------------------------------------------------------------------------
class %(CHUGIN_NAME)%
{
public:
    // constructor
    %(CHUGIN_NAME)%( t_CKFLOAT fs )
    {
        m_param = 0;
    }

    // for chugins extending UGen
    SAMPLE tick( SAMPLE in )
    {
        // default: this passes whatever input is patched into chugin
        return in;
    }

    // set parameter example
    t_CKFLOAT setParam( t_CKFLOAT p )
    {
        m_param = p;
        return p;
    }

    // get parameter example
    t_CKFLOAT getParam() { return m_param; }
    
private:
    // instance data
    t_CKFLOAT m_param;
};


//-----------------------------------------------------------------------------
// info function: ChucK calls this when loading/probing the chugin
// NOTE: please customize these info fields below; they will be used for
// chugins loading, probing, and package management and documentation
//-----------------------------------------------------------------------------
CK_DLL_INFO( %(CHUGIN_NAME)% )
{
    // the version string of this chugin, e.g., "v1.2.1"
    QUERY->setinfo( QUERY, CHUGIN_INFO_CHUGIN_VERSION, "" );
    // the author(s) of this chugin, e.g., "Alice Baker & Carl Donut"
    QUERY->setinfo( QUERY, CHUGIN_INFO_AUTHORS, "" );
    // text description of this chugin; what is it? what does it do? who is it for?
    QUERY->setinfo( QUERY, CHUGIN_INFO_DESCRIPTION, "" );
    // (optional) URL of the homepage for this chugin
    QUERY->setinfo( QUERY, CHUGIN_INFO_URL, "" );
    // (optional) contact email
    QUERY->setinfo( QUERY, CHUGIN_INFO_EMAIL, "" );
}


//-----------------------------------------------------------------------------
// query function: ChucK calls this when loading the chugin
// modify this function to define this chugin's API and language extensions
//-----------------------------------------------------------------------------
CK_DLL_QUERY( %(CHUGIN_NAME)% )
{
    // generally, don't change this...
    QUERY->setname( QUERY, "%(CHUGIN_NAME)%" );

    // ------------------------------------------------------------------------
    // begin class definition(s); will be compiled, verified,
    // and added to the chuck host type system for use
    // ------------------------------------------------------------------------
    // NOTE to create a non-UGen class, change the second argument
    // to extend a different ChucK class (e.g., "Object")
    QUERY->begin_class( QUERY, "%(CHUGIN_NAME)%", "UGen" );

    // register default constructor
    QUERY->add_ctor( QUERY, %(CHUGIN_LCNAME)%_ctor );
    // NOTE constructors can be overloaded like any other functions,
    // each overloaded constructor begins with `QUERY->add_ctor()`
    // followed by a sequence of `QUERY->add_arg()`

    // register the destructor (probably no need to change)
    QUERY->add_dtor( QUERY, %(CHUGIN_LCNAME)%_dtor );

    // for UGens only: add tick function
    // NOTE a non-UGen class should remove or comment out this next line
    QUERY->add_ugen_func( QUERY, %(CHUGIN_LCNAME)%_tick, NULL, 1, 1 );
    // NOTE: if this is to be a UGen with more than 1 channel,
    // e.g., a multichannel UGen -- will need to use add_ugen_funcf()
    // and declare a tickf function using CK_DLL_TICKF

    // example of adding setter method
    QUERY->add_mfun( QUERY, %(CHUGIN_LCNAME)%_setParam, "float", "param" );
    // example of adding argument to the above method
    QUERY->add_arg( QUERY, "float", "arg" );

    // example of adding getter method
    QUERY->add_mfun( QUERY, %(CHUGIN_LCNAME)%_getParam, "float", "param" );
    
    // this reserves a variable in the ChucK internal class to store 
    // referene to the c++ class we defined above
    %(CHUGIN_LCNAME)%_data_offset = QUERY->add_mvar( QUERY, "int", "@%(CHUGIN_INITIALS)%_data", false );

    // ------------------------------------------------------------------------
    // end the class definition
    // IMPORTANT: this MUST be called to each class definition!
    // ------------------------------------------------------------------------
    QUERY->end_class( QUERY );

    // wasn't that a breeze?
    return TRUE;
}


// implementation for the default constructor
CK_DLL_CTOR( %(CHUGIN_LCNAME)%_ctor )
{
    // get the offset where we'll store our internal c++ class pointer
    OBJ_MEMBER_INT( SELF, %(CHUGIN_LCNAME)%_data_offset ) = 0;
    
    // instantiate our internal c++ class representation
    %(CHUGIN_NAME)% * %(CHUGIN_INITIALS)%_obj = new %(CHUGIN_NAME)%( API->vm->srate(VM) );
    
    // store the pointer in the ChucK object member
    OBJ_MEMBER_INT( SELF, %(CHUGIN_LCNAME)%_data_offset ) = (t_CKINT)%(CHUGIN_INITIALS)%_obj;
}


// implementation for the destructor
CK_DLL_DTOR( %(CHUGIN_LCNAME)%_dtor )
{
    // get our c++ class pointer
    %(CHUGIN_NAME)% * %(CHUGIN_INITIALS)%_obj = (%(CHUGIN_NAME)% *)OBJ_MEMBER_INT( SELF, %(CHUGIN_LCNAME)%_data_offset );
    // clean up (this macro tests for NULL, deletes, and zeros out the variable)
    CK_SAFE_DELETE( %(CHUGIN_INITIALS)%_obj );
    // set the data field to 0
    OBJ_MEMBER_INT( SELF, %(CHUGIN_LCNAME)%_data_offset ) = 0;
}


// implementation for tick function (relevant only for UGens)
CK_DLL_TICK( %(CHUGIN_LCNAME)%_tick )
{
    // get our c++ class pointer
    %(CHUGIN_NAME)% * %(CHUGIN_INITIALS)%_obj = (%(CHUGIN_NAME)% *)OBJ_MEMBER_INT(SELF, %(CHUGIN_LCNAME)%_data_offset);
 
    // invoke our tick function; store in the magical out variable
    if( %(CHUGIN_INITIALS)%_obj ) *out = %(CHUGIN_INITIALS)%_obj->tick( in );

    // yes
    return TRUE;
}


// example implementation for setter
CK_DLL_MFUN( %(CHUGIN_LCNAME)%_setParam )
{
    // get our c++ class pointer
    %(CHUGIN_NAME)% * %(CHUGIN_INITIALS)%_obj = (%(CHUGIN_NAME)% *)OBJ_MEMBER_INT( SELF, %(CHUGIN_LCNAME)%_data_offset );

    // get next argument
    // NOTE argument type must match what is specified above in CK_DLL_QUERY
    // NOTE this advances the ARGS pointer, so save in variable for re-use
    t_CKFLOAT arg1 = GET_NEXT_FLOAT( ARGS );
    
    // call setParam() and set the return value
    RETURN->v_float = %(CHUGIN_INITIALS)%_obj->setParam( arg1 );
}


// example implementation for getter
CK_DLL_MFUN(%(CHUGIN_LCNAME)%_getParam)
{
    // get our c++ class pointer
    %(CHUGIN_NAME)% * %(CHUGIN_INITIALS)%_obj = (%(CHUGIN_NAME)% *)OBJ_MEMBER_INT( SELF, %(CHUGIN_LCNAME)%_data_offset );

    // call getParam() and set the return value
    RETURN->v_float = %(CHUGIN_INITIALS)%_obj->getParam();
}
'''
code['test'] = u'''//--------------------------------------------------------------------
// This is a boilerplate ChucK program generated by chuginate,
//     to help you test your new chugin, ChuGin Developer!
//--------------------------------------------------------------------
// 1) try running this program after building your chugin
//    (the bulid process should yield a %(CHUGIN_NAME)%.chug file)
//
// 2) you can manullay load the chugin when you run this program
//    `chuck --chugin:%(CHUGIN_NAME)%.chug %(CHUGIN_NAME)%-test.ck`
//
// 3) OR you can put the chugin into your chugins search path
//    NOTE: not recommended until you feel the chugin to be
//    reasonably stable, as chugins in your chugins search paths
//    will automatically load every time you run `chuck` or
//    start the VM in miniAudicle...
//
// Want to see more information? Add the --verbose:3 (-v3) flag:
//    `chuck --chugin:%(CHUGIN_NAME)%.chug %(CHUGIN_NAME)%-test.ck -v3`
//--------------------------------------------------------------------

// instantiate a %(CHUGIN_NAME)%
%(CHUGIN_NAME)% obj;

// call obj.param() with argument of 5; same as obj.param(5)
5 => obj.param;

// print
<<< obj.param() >>>;
'''
code['makefile'] = u'''
# chugin name
CHUGIN_NAME=%(CHUGIN_NAME)%

# all of the c/cpp files that compose this chugin
C_MODULES=
CXX_MODULES=%(CHUGIN_NAME)%.cpp

# where to find chugin.h
CK_SRC_PATH?=%(CHUGIN_HEADER_PATH)%

# where to install chugin
CHUGIN_PATH?=/usr/local/lib/chuck


# ---------------------------------------------------------------------------- #
# you won't generally need to change anything below this line for a new chugin #
# ---------------------------------------------------------------------------- #

# default target: print usage message and quit
current: 
	@echo "[chugin build]: please use one of the following configurations:"
	@echo "   make linux, make mac, make web, or make win32"

ifneq ($(CK_TARGET),)
.DEFAULT_GOAL:=$(CK_TARGET)
ifeq ($(MAKECMDGOALS),)
MAKECMDGOALS:=$(.DEFAULT_GOAL)
endif
endif

.PHONY: mac osx linux linux-pulse linux-oss linux-jack linux-alsa win32
mac osx linux linux-pulse linux-oss linux-jack linux-alsa: all

win32:
	make -f makefile.win

CC=gcc
CXX=gcc
LD=g++

ifneq (,$(strip $(filter mac osx,$(MAKECMDGOALS))))
include makefile.mac
endif

ifneq (,$(strip $(filter linux,$(MAKECMDGOALS))))
include makefile.linux
endif

ifneq (,$(strip $(filter linux-oss,$(MAKECMDGOALS))))
include makefile.linux
endif

ifneq (,$(strip $(filter linux-pulse,$(MAKECMDGOALS))))
include makefile.linux
endif

ifneq (,$(strip $(filter linux-jack,$(MAKECMDGOALS))))
include makefile.linux
endif

ifneq (,$(strip $(filter linux-alsa,$(MAKECMDGOALS))))
include makefile.linux
endif

ifneq ($(CHUCK_DEBUG),)
FLAGS+= -g
else
FLAGS+= -O3
endif

ifneq ($(CHUCK_STRICT),)
FLAGS+= -Werror
endif

# default: build a dynamic chugin
CK_CHUGIN_STATIC?=0

ifeq ($(CK_CHUGIN_STATIC),0)
SUFFIX=.chug
else
SUFFIX=.schug
FLAGS+= -D__CK_DLL_STATIC__
endif
# webchugin extension
WEBSUFFIX=.wasm

C_OBJECTS=$(addsuffix .o,$(basename $(C_MODULES)))
CXX_OBJECTS=$(addsuffix .o,$(basename $(CXX_MODULES)))

CHUG=$(addsuffix $(SUFFIX),$(CHUGIN_NAME))
WEBCHUG=$(addsuffix $(WEBSUFFIX),$(CHUG))

all: $(CHUG)

$(CHUG): $(C_OBJECTS) $(CXX_OBJECTS)
ifeq ($(CK_CHUGIN_STATIC),0)
	$(LD) $(LDFLAGS) -o $@ $^
else
	ar rv $@ $^
	ranlib $@
endif

$(C_OBJECTS): %.o: %.c
	$(CC) $(FLAGS) -c -o $@ $<

$(CXX_OBJECTS): %.o: %.cpp $(CK_SRC_PATH)/chugin.h
	$(CXX) $(FLAGS) -c -o $@ $<

# build as webchugin
web:
	emcc -O3 -s SIDE_MODULE=1 -s DISABLE_EXCEPTION_CATCHING=0 -fPIC -Wformat=0 \
	-I $(CK_SRC_PATH) $(CXX_MODULES) $(C_MODULES) -o $(WEBCHUG)

install: $(CHUG)
	mkdir -p $(CHUGIN_PATH)
	cp $^ $(CHUGIN_PATH)
	chmod 755 $(CHUGIN_PATH)/$(CHUG)

clean: 
	rm -rf $(C_OBJECTS) $(CXX_OBJECTS) $(CHUG) $(WEBCHUG) Release Debug
'''
code['makefile.mac'] = u'''#-----------------------------------
# makefile.mac
# macOS-specific build configuration
#-----------------------------------

# to build for the native architecture: (leave blank)
# ARCHS?=
#
# to build for intel:
# ARCHS?=x86_64
#
# to build for apple silicon:
# ARCHS?=arm64
#
# to build a universal=binary chugin:
# ARCHS?=x86_64 arm64
ARCHS?=

# construct compiler option string
ARCHOPTS=$(addprefix -arch ,$(ARCHS))

# compiler flags
FLAGS+=-mmacosx-version-min=10.9 -I$(CK_SRC_PATH) $(ARCHOPTS) -fPIC
# linker flags
LDFLAGS+=-mmacosx-version-min=10.9 -shared -lc++ $(ARCHOPTS)

# which C++ compiler
CXX=clang++
# which linker to user
LD=clang++
'''
code['makefile.linux'] = u'''#-----------------------------------
# makefile.linux
# Linux-specific build configuration
#-----------------------------------

# uncomment to override where `make install` puts chugin (see also: makefile)
# CHUGIN_PATH=/usr/local/lib/chuck

# compiler flags
FLAGS=-D__LINUX_ALSA__ -D__PLATFORM_LINUX__ -I$(CK_SRC_PATH) -fPIC
# linker flags
LDFLAGS=-shared -lstdc++

# which C++ compiler to use
CXX=g++
# which linker to use
LD=gcc
'''
code['makefile.win'] = u'''#--------------------------------------
# makefile.win32
# Windows-specific build configurations
# (supports 32-bit and 64-bit)
#--------------------------------------

# command line build tool
MSBUILD=msbuild.exe

# configuration
ifneq (,$(CHUCK_DEBUG))
CONFIG=Debug
CHUG_BIN=Debug/%(CHUGIN_NAME)%.chug
else
CONFIG=Release
CHUG_BIN=Release/%(CHUGIN_NAME)%.chug
endif

# targets
default: $(CHUG_BIN)

$(CHUG_BIN): 
	$(MSBUILD) /p:Configuration=$(CONFIG) 

clean:
	$(MSBUILD) /p:Configuration=$(CONFIG) /t:Clean

'''
code['.vcxproj'] = u'''<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <Import Project="$(VCTargetsPath)Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)/Microsoft.Cpp.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <LinkIncremental>true</LinkIncremental>
    <TargetExt>.chug</TargetExt>
    <IncludePath>chuck/include;$(IncludePath)</IncludePath>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <LinkIncremental>false</LinkIncremental>
    <TargetExt>.chug</TargetExt>
    <IncludePath>chuck/include;$(IncludePath)</IncludePath>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <LinkIncremental>true</LinkIncremental>
    <TargetExt>.chug</TargetExt>
    <IncludePath>chuck/include;$(IncludePath)</IncludePath>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <LinkIncremental>false</LinkIncremental>
    <TargetExt>.chug</TargetExt>
    <IncludePath>chuck/include;$(IncludePath)</IncludePath>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <ClCompile>
      <PrecompiledHeader>
      </PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>Disabled</Optimization>
      <PreprocessorDefinitions>WIN32;_DEBUG;_WINDOWS;_USRDLL;%(CHUGIN_UCNAME)%_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
    </Link>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <PrecompiledHeader>
      </PrecompiledHeader>
      <Optimization>MaxSpeed</Optimization>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;%(CHUGIN_UCNAME)%_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
    </Link>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <PrecompiledHeader>
      </PrecompiledHeader>
      <WarningLevel>Level3</WarningLevel>
      <Optimization>Disabled</Optimization>
      <PreprocessorDefinitions>WIN32;_DEBUG;_WINDOWS;_USRDLL;%(CHUGIN_UCNAME)%_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
    </Link>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <PrecompiledHeader>
      </PrecompiledHeader>
      <Optimization>MaxSpeed</Optimization>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <PreprocessorDefinitions>WIN32;NDEBUG;_WINDOWS;_USRDLL;%(CHUGIN_UCNAME)%_EXPORTS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
    </Link>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClCompile Include="%(CHUGIN_NAME)%.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="%(CHUGIN_NAME)%.h" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)Microsoft.Cpp.Targets" />
</Project>
'''

if not USE_EXISTING_CHUCK_HEADERS:
    tgz['chuck'] = u''''''

filepath['cpp'] = "%s/%s.cpp" % (dest_dir, chugin_name)
filepath['test'] = "%s/%s-test.ck" % (dest_dir, chugin_name)
filepath['makefile'] = "%s/makefile" % (dest_dir)
filepath['makefile.mac'] = "%s/makefile.mac" % (dest_dir)
filepath['makefile.linux'] = "%s/makefile.linux" % (dest_dir)
filepath['makefile.win'] = "%s/makefile.win" % (dest_dir)
filepath['.vcxproj'] = "%s/%s.vcxproj" % (dest_dir, chugin_name)
filepath['chuck'] = "%s/chuck.tgz" % (dest_dir)

newlines['.vcxproj'] = '\r\n'

code['cpp'] = substitute(code['cpp'])
code['test'] = substitute(code['test'])
code['makefile'] = substitute(code['makefile'])
code['makefile.win'] = substitute(code['makefile.win'])
code['.vcxproj'] = substitute(code['.vcxproj'])


for key in code:
    if key in newlines:
        nl = newlines[key]
    else:
        nl = '\n'
    with io.open(filepath[key], "wt", newline=nl) as f:
        f.write(code[key])

for key in tgz:
    with io.open(filepath[key], "wb") as f:
        f.write(base64.b64decode(tgz[key]))
    with tarfile.open(filepath[key]) as tar:
        tar.extractall(os.path.dirname(filepath[key]))
    os.unlink(filepath[key])


