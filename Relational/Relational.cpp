/*
 * Relational UGen - relational oparators for audio signals 
 * 
 * @author      Mario Buoninfante
 * @year        2020
*/



//-----------------------------------------------------------------------------
// Entaro ChucK Developer!
// This is a Chugin boilerplate, generated by chuginate!
//-----------------------------------------------------------------------------

// this should align with the correct versions of these ChucK files
#include "chuck_dl.h"
#include "chuck_def.h"

// general includes
#include <stdio.h>
#include <limits.h>

CK_DLL_CTOR(relational_ctor);
CK_DLL_DTOR(relational_dtor);

CK_DLL_MFUN(relational_setOperator);
CK_DLL_MFUN(relational_getOperator);
CK_DLL_MFUN(relational_setOperand);
CK_DLL_MFUN(relational_getOperand);

CK_DLL_TICK(relational_tick);

t_CKINT relational_data_offset = 0;



class Relational
{
public:
    // constructor
    Relational( t_CKFLOAT fs)
    {
        m_operator = 0;     // 0. ==, 1. !=, 2. >, 3. <, 4. >=, 5. <=
        m_operand  = 0;
    }

    // for Chugins extending UGen
    SAMPLE tick( SAMPLE in )
    {
        if (m_operator == 0)
            return in == m_operand;
        if (m_operator == 1)
            return in != m_operand;
        if (m_operator == 2)
            return in > m_operand;
        if (m_operator == 3)
            return in < m_operand;
        if (m_operator == 4)
            return in >= m_operand;
        if (m_operator == 5)
            return in <= m_operand;
    }

    t_CKINT setOperator( t_CKINT x )
    {
        m_operator = x;
        return x;
    }

    t_CKINT getOperator() { return m_operator; }
    
    t_CKFLOAT setOperand( t_CKFLOAT x )
    {
        m_operand = x;
        return x;
    }

    t_CKFLOAT getOperand() { return m_operand; }

private:
    t_CKINT     m_operator;
    t_CKFLOAT   m_operand;
};


// query function: chuck calls this when loading the Chugin
// NOTE: developer will need to modify this function to
// add additional functions to this Chugin
CK_DLL_QUERY( Relational )
{
    QUERY->setname(QUERY, "Relational");
    
    QUERY->begin_class(QUERY, "Relational", "UGen");

    QUERY->add_ctor(QUERY, relational_ctor);
    QUERY->add_dtor(QUERY, relational_dtor);
    
    QUERY->add_ugen_func(QUERY, relational_tick, NULL, 1, 1);
    
    QUERY->add_mfun(QUERY, relational_setOperator, "int", "operator");
    QUERY->add_arg(QUERY, "int", "arg");

    QUERY->add_mfun(QUERY, relational_getOperator, "int", "operator");
    

    QUERY->add_mfun(QUERY, relational_setOperand, "float", "operand");
    QUERY->add_arg(QUERY, "float", "arg");

    QUERY->add_mfun(QUERY, relational_getOperand, "float", "operand");

    relational_data_offset = QUERY->add_mvar(QUERY, "int", "@r_data", false);

    QUERY->end_class(QUERY);

    return TRUE;
}


// implementation for the constructor
CK_DLL_CTOR(relational_ctor)
{
    // get the offset where we'll store our internal c++ class pointer
    OBJ_MEMBER_INT(SELF, relational_data_offset) = 0;
    
    // instantiate our internal c++ class representation
    Relational * r_obj = new Relational(API->vm->get_srate(API, SHRED));
    
    // store the pointer in the ChucK object member
    OBJ_MEMBER_INT(SELF, relational_data_offset) = (t_CKINT) r_obj;
}


// implementation for the destructor
CK_DLL_DTOR(relational_dtor)
{
    // get our c++ class pointer
    Relational * r_obj = (Relational *) OBJ_MEMBER_INT(SELF, relational_data_offset);
    // check it
    if( r_obj )
    {
        // clean up
        delete r_obj;
        OBJ_MEMBER_INT(SELF, relational_data_offset) = 0;
        r_obj = NULL;
    }
}


// implementation for tick function
CK_DLL_TICK(relational_tick)
{
    // get our c++ class pointer
    Relational * r_obj = (Relational *) OBJ_MEMBER_INT(SELF, relational_data_offset);
 
    // invoke our tick function; store in the magical out variable
    if(r_obj) *out = r_obj->tick(in);

    // yes
    return TRUE;
}


CK_DLL_MFUN(relational_setOperator)
{
    // get our c++ class pointer
    Relational * r_obj = (Relational *) OBJ_MEMBER_INT(SELF, relational_data_offset);
    // set the return value
    RETURN->v_int = r_obj->setOperator(GET_NEXT_INT(ARGS));
}

CK_DLL_MFUN(relational_getOperator)
{
    // get our c++ class pointer
    Relational * r_obj = (Relational *) OBJ_MEMBER_INT(SELF, relational_data_offset);
    // set the return value
    RETURN->v_int = r_obj->getOperator();
}

CK_DLL_MFUN(relational_setOperand)
{
    // get our c++ class pointer
    Relational * r_obj = (Relational *) OBJ_MEMBER_INT(SELF, relational_data_offset);
    // set the return value
    RETURN->v_float = r_obj->setOperand(GET_NEXT_FLOAT(ARGS));
}

CK_DLL_MFUN(relational_getOperand)
{
    // get our c++ class pointer
    Relational * r_obj = (Relational *) OBJ_MEMBER_INT(SELF, relational_data_offset);
    // set the return value
    RETURN->v_float = r_obj->getOperand();
}
